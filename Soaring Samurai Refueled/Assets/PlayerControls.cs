//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Combat"",
            ""id"": ""168108b5-1f6c-4235-b2a5-3cf8634f04b3"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""4332c5d9-dc68-423c-8221-2257adf4f57e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DownLeftSlash"",
                    ""type"": ""Button"",
                    ""id"": ""2082df76-b3d3-44e2-a9c3-a8226d2b6068"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UpLeftSlash"",
                    ""type"": ""Button"",
                    ""id"": ""123304fe-bd68-421f-93cc-da02d49ecfd1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DownRightSlash"",
                    ""type"": ""Button"",
                    ""id"": ""8b145e31-289f-4aad-89c2-a79451905779"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UpRightSlash"",
                    ""type"": ""Button"",
                    ""id"": ""c4911a38-56e9-48d4-86c6-b404719124c1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""d07e46c7-ee7e-4515-9bba-0e4f8a7d5b69"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DashAttack"",
                    ""type"": ""Button"",
                    ""id"": ""0753e57c-2fc5-4ce2-9f22-145b761a931f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2763de8c-e818-42dc-93b9-fb95192bb098"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bc23d936-375e-400f-a83b-7a91050f33ab"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DownLeftSlash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""122ac79e-ec6f-4909-a944-e55e288e369a"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpLeftSlash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d3bd95f-ea1e-459b-8326-7b7678fc288f"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DownRightSlash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""86de84b8-abba-472b-bf5d-f9411e60e976"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpRightSlash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e582338d-2c29-40d3-8b47-b44a05609edf"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""113130be-fa12-42b5-bd93-a8794f3856f0"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DashAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Combat
        m_Combat = asset.FindActionMap("Combat", throwIfNotFound: true);
        m_Combat_Move = m_Combat.FindAction("Move", throwIfNotFound: true);
        m_Combat_DownLeftSlash = m_Combat.FindAction("DownLeftSlash", throwIfNotFound: true);
        m_Combat_UpLeftSlash = m_Combat.FindAction("UpLeftSlash", throwIfNotFound: true);
        m_Combat_DownRightSlash = m_Combat.FindAction("DownRightSlash", throwIfNotFound: true);
        m_Combat_UpRightSlash = m_Combat.FindAction("UpRightSlash", throwIfNotFound: true);
        m_Combat_Dash = m_Combat.FindAction("Dash", throwIfNotFound: true);
        m_Combat_DashAttack = m_Combat.FindAction("DashAttack", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Combat
    private readonly InputActionMap m_Combat;
    private List<ICombatActions> m_CombatActionsCallbackInterfaces = new List<ICombatActions>();
    private readonly InputAction m_Combat_Move;
    private readonly InputAction m_Combat_DownLeftSlash;
    private readonly InputAction m_Combat_UpLeftSlash;
    private readonly InputAction m_Combat_DownRightSlash;
    private readonly InputAction m_Combat_UpRightSlash;
    private readonly InputAction m_Combat_Dash;
    private readonly InputAction m_Combat_DashAttack;
    public struct CombatActions
    {
        private @PlayerControls m_Wrapper;
        public CombatActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Combat_Move;
        public InputAction @DownLeftSlash => m_Wrapper.m_Combat_DownLeftSlash;
        public InputAction @UpLeftSlash => m_Wrapper.m_Combat_UpLeftSlash;
        public InputAction @DownRightSlash => m_Wrapper.m_Combat_DownRightSlash;
        public InputAction @UpRightSlash => m_Wrapper.m_Combat_UpRightSlash;
        public InputAction @Dash => m_Wrapper.m_Combat_Dash;
        public InputAction @DashAttack => m_Wrapper.m_Combat_DashAttack;
        public InputActionMap Get() { return m_Wrapper.m_Combat; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CombatActions set) { return set.Get(); }
        public void AddCallbacks(ICombatActions instance)
        {
            if (instance == null || m_Wrapper.m_CombatActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CombatActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @DownLeftSlash.started += instance.OnDownLeftSlash;
            @DownLeftSlash.performed += instance.OnDownLeftSlash;
            @DownLeftSlash.canceled += instance.OnDownLeftSlash;
            @UpLeftSlash.started += instance.OnUpLeftSlash;
            @UpLeftSlash.performed += instance.OnUpLeftSlash;
            @UpLeftSlash.canceled += instance.OnUpLeftSlash;
            @DownRightSlash.started += instance.OnDownRightSlash;
            @DownRightSlash.performed += instance.OnDownRightSlash;
            @DownRightSlash.canceled += instance.OnDownRightSlash;
            @UpRightSlash.started += instance.OnUpRightSlash;
            @UpRightSlash.performed += instance.OnUpRightSlash;
            @UpRightSlash.canceled += instance.OnUpRightSlash;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
            @DashAttack.started += instance.OnDashAttack;
            @DashAttack.performed += instance.OnDashAttack;
            @DashAttack.canceled += instance.OnDashAttack;
        }

        private void UnregisterCallbacks(ICombatActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @DownLeftSlash.started -= instance.OnDownLeftSlash;
            @DownLeftSlash.performed -= instance.OnDownLeftSlash;
            @DownLeftSlash.canceled -= instance.OnDownLeftSlash;
            @UpLeftSlash.started -= instance.OnUpLeftSlash;
            @UpLeftSlash.performed -= instance.OnUpLeftSlash;
            @UpLeftSlash.canceled -= instance.OnUpLeftSlash;
            @DownRightSlash.started -= instance.OnDownRightSlash;
            @DownRightSlash.performed -= instance.OnDownRightSlash;
            @DownRightSlash.canceled -= instance.OnDownRightSlash;
            @UpRightSlash.started -= instance.OnUpRightSlash;
            @UpRightSlash.performed -= instance.OnUpRightSlash;
            @UpRightSlash.canceled -= instance.OnUpRightSlash;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
            @DashAttack.started -= instance.OnDashAttack;
            @DashAttack.performed -= instance.OnDashAttack;
            @DashAttack.canceled -= instance.OnDashAttack;
        }

        public void RemoveCallbacks(ICombatActions instance)
        {
            if (m_Wrapper.m_CombatActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICombatActions instance)
        {
            foreach (var item in m_Wrapper.m_CombatActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CombatActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CombatActions @Combat => new CombatActions(this);
    public interface ICombatActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnDownLeftSlash(InputAction.CallbackContext context);
        void OnUpLeftSlash(InputAction.CallbackContext context);
        void OnDownRightSlash(InputAction.CallbackContext context);
        void OnUpRightSlash(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnDashAttack(InputAction.CallbackContext context);
    }
}
